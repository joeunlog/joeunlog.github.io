{"0": {
    "doc": "2021-01-27",
    "title": "2021-01-27",
    "content": "1교시 - AWS_RDS - OLTP(online transaction processing)성 DB와 DW (Dataware house) - Amazon Redshift는 DW - DW는 대량 Read가 많이 일어남, 수정이 자주 일어나지 않음, 실시간 작업이 아님 - OLTP는 소량 Read로 많이 일어남 - DW랑 OLTP랑 너무 달라서 따로 씀 : 오라클을 쓴다고 해도 각 DB를 구성해놓고 씀 2교시 - 네트워크 계층 : VPC를 만들어 볼 예정 - VPN : 가상의 사설 네트워크 : 네트워크 용어임 - VPC : 가상의 사설 클라우드 - VPC 안에 서브넷 두 개를 만들어 볼 예정 - 서브넷 관련 : 255는 이진수로 11111111이다. 이진수로 1인 부분이 주소로 쓰는 부분이라는 뜻 : ex. 255.255.255.128 = 11111111.11111111.11111111.10000000 - 일반적으로 외부에서 RDS로 직접 연결은 불가능 : 실습시간에 강사님 서버에 들어간 것은 모든 것을 다 열어놨기 때문 : 주로 인스턴스에 DB를 관리하는 프로그램을 넣어놓고 이 인스턴스에 DB관련 요청을 통해 뭔가 작업이 이루어지는 것 3교시 - 4교시 - 서브넷 권장 사항 5교시 - DBMS마다 사용하는 포트가 다름 - 개인 실습 시작 (VPC) 6교시 - 개인 실습 계속 ",
    "url": "/docs/daily-learning-log/20210127.html",
    "relUrl": "/docs/daily-learning-log/20210127.html"
  },"1": {
    "doc": "2021-01-27",
    "title": "2021-01-27",
    "content": " ",
    "url": "/docs/daily-learning-log/20210127.html",
    "relUrl": "/docs/daily-learning-log/20210127.html"
  },"2": {
    "doc": "2021-01-28",
    "title": "2021-01-28",
    "content": "1교시 - 아키텍처에서 NAT게이트웨이, EC2인스턴스 그 쪽 관련 - 다이어그램에서 자물쇠 표시는 private network를 의미 - 외부 네트워크는 일부 url만 열어줌 - EC2에서 외부 네트워크에 뭔가를 요청하는거고 NAT 게이트웨이를 통해 외부 네트워크로 나가게 된다 - 서브넷마다 라우팅테이블이 있는데, NAT로 나가게 되는 주소를 제한하는것임 - 클라우드에서 라우터가 따로 존재하지 않고, 라우팅 테이블은 서브넷마다 존재 - 결과적으로, 인터넷 게이트웨이와 연결돼야 외부 네트워크와 통신 가능 - VPC는 어떤 리전 안에 만드는 것으로 여러 개의 리전에 걸쳐서 만들 수 없음 - 단일 VPC 패턴 , 다중 VPC 패턴, 복수 계정 패턴은 규모 차이 (첨부된 문서 참고) - 계정당 VPC 5개 - AWS에는 Hard limit, Soft limit 서비스가 있는데 이거는 Soft limit으로, 요청하면 제한조건 바꿔줌 (늘릴 수 있다는 얘기) - IP 한 칸당 8bit로, CIDR/16인 VPC는 앞의 2칸이 네트워크 주소 - 즉 CIDR /숫자 는 네트워크 주소가 어디까지인지를 알려줌 : 호스트 주소로 어디까지 쓸 수 있는지를 나타냄 : CIDR /32면 4칸 모두 네트워크 주소이므로 호스트 주소는 1개인 것 - 이 숫자를 8의배수가 아닌 숫자로 쓸 수도 있음 : bit단위로 생각하면 됨 : 즉, 10진수로 생각하면 IP주소는 총 4칸이지만, 2진수로 하면 8개씩 4세트의 숫자임 : 앞에서부터 해당 숫자의 비트 수 만큼이 네트워크 주소 - 퍼블릭 서브넷, 프라이빗 서브넷을 각각 만들 때 CIDR를 지정해서 네트워크 주소와 호스트 주소를 나눔 - CIDR랑 서브넷마스크는 다른 점이 존재 : 용도 - 서브넷 마스크는 호스트 주소를 갈라서 쓰고 싶어서 쓰는 것, 서브넷 마스크로 원래 호스트주소 영역도 네트워크 주소로 지정해서 네트워크 영역을 갈라서 쓰는 거 - 즉 서브넷 마스크를 하나 쓰면 네트워크가 둘로 갈라짐 - CIDR은 내 네트워크 주소가 어디까지인지를 알려주는 용도 2교시 - VPC 계속 - 어제 실습한 내용 복습 3교시 - 어제 실습한 내용 복습 계속 - Windows server EC2 생성 - 원격연결 - anaconda 설치 4교시 - Django 설치 - 윈도우 방화벽 해제 5교시 - Django - 아키텍처 : 시스템 전체 기본 설계, 규칙 : 시스템 아키텍처 : hw아키텍처 + sw아키텍처 - 아키텍처 패턴/스타일 : 설계노하우 : 문제영역, 이름 : (시스템전체-비기능품질) : ex. sw 아키텍처 패턴 2가지 : MVC, Layer - 디자인 패턴 : 설계노하우 : 문제영역, 이름 : (시스템전체-비기능품질) : ex. singleton, proxy - Django에서는 MVC(Model, View, Controller)가 아니라 MVT(Model, View, Template)로 씀 6교시 - MVC에서 View는 화면 : HTML문서 - model은 C.R.U.D : DB연결 - Controller는 모든 제어 : 고객 요청 받고 model에 DB 조회 요청하고 답 받은거를 View에 화면출력하라고 명령 - 개발 프레임워크 : sw 개발의 뼈대를 구현해 놓은 것 : python에서는 Django, Flask 등이 있음 : 주로 범용적인 것을 구성해놓음 : 코드를 구현해놓으면 프레임워크가 그 코드를 가져다가 씀 - 라이브러리나 패키지는 미리 개발해놓은 코드들의 묶음으로, 사용자가 패키지에 있는 것들을 호출해서 씀 : 라이브러리나 패키지가 사용자의 코드를 가져다가 쓰지는 않는다는 것이 프레임워크와의 차이점 - Django의 MTV는 화면에 표시된 버튼을 누르는게 사용자 요청같은거니까, 사용자 요청을 받는 부분을 View로 표기 - Template은 MVC의 View와 같음 - 개인 컴퓨터에 Django 설치 - 파이참에서 터미널을 작동시키는 이유 : 프로젝트를 새로 만들면 가상 실행환경이 생김(venv) : Django를 이 실행환경에 설치하기 위함 - Base 실행환경은 Django 설치 안된 상태가 됨 : 이런 식으로 여러 버전의 python을 쓸 수도 있음(참고) - Django를 설치하면 SQLite3이라는 DB도 같이 설치됨 + DBMS, WebServer, WAS, PythonMVC Framework 7교시 - 프로젝트 회의 ",
    "url": "/docs/daily-learning-log/20210128.html",
    "relUrl": "/docs/daily-learning-log/20210128.html"
  },"3": {
    "doc": "2021-01-28",
    "title": "2021-01-28",
    "content": " ",
    "url": "/docs/daily-learning-log/20210128.html",
    "relUrl": "/docs/daily-learning-log/20210128.html"
  },"4": {
    "doc": "2021-01-29",
    "title": "2021-01-29",
    "content": "1교시 . - 어제 복습 . 2교시 . - 프로젝트는 2월 9일 발표 예정 . - 2월 2, 3, 4, 8일은 온전히 프로젝트하고 5일에는 수업 (고가연성 아키텍처) . - 2월 1일에는 게시판 만들기 실습 예정 . - Django 웹 어플리케이션 개발 실습 시작 . - Python Class로 SQL의 테이블이 자동 생성하기 . : models.py 파일에 클래스 정의, models.Model을 상속하는 클래스를 작성 . : ex. from django.db import models class Quetion(models.Model): . - Class와 테이블이 맵핑이 되고, class로 생성한 객체가 테이블의 ............ ORM(Object Relational Mapping 객체관계맵핑) . 3교시 - myDjangoSite 실습 : Question class 생성, admin 설정 . : admin.py 파일에 에러가 3개 뜨는데, 이건 로컬상태에서 해당 코드가 내용을 못찾아서 그러는거고 실행 잘 됐으면 문제 없음 . - 교재에서의 View(Django MVT)는 MVC에서는 Controller를 의미 . 4교시 . - View, Template 개발 . 5교시 . - 127.0.0.1 : 현재 컴퓨터 라는 의미 . - 그 뒤의 8000은 현재 Django가 쓰는 서버의 포트넘버 . 6교시 . - choice 데이터 추가하기 . 7교시 . - 자습 . ",
    "url": "/docs/daily-learning-log/20210129.html",
    "relUrl": "/docs/daily-learning-log/20210129.html"
  },"5": {
    "doc": "2021-01-29",
    "title": "2021-01-29",
    "content": " ",
    "url": "/docs/daily-learning-log/20210129.html",
    "relUrl": "/docs/daily-learning-log/20210129.html"
  },"6": {
    "doc": "2021-02-01",
    "title": "2021-02-01",
    "content": "1교시 - 복습 - SW 개발 프레임워크(MVC) : 장고, 스프링 등등 : 스프링은 ORM 포함하지 않아서 따로 MyDa뭐시기를 씀 2교시 - 파이썬 쉘로 데이터 조작 실습 - Question.objects.filter : 모델명(테이블에 매핑), 객체들(데이터들), filter(WHERE와같음) - 컬럼명__조건 : 해당 컬럼에서 조건에 해당하는 것들 찾음 : ex. question_text__startswith='What' , pub_date__year=2005 - 객체.delete() : 레코드 삭제 함수 - 객체.save() : 새로운 데이터 생성 혹은 데이터 수정 함수 - 새로운 프로젝트 생성 : MyDjangoSite2 : 게시판 만들기 - 클래스 선언(테이블 생성)에서 : null = False : NOYNULL : primary_key = True : 기본키로 설정 : on_delete = CASCADE : 부모데이터가 삭제되면 포린키의 자식데이터도 삭제 : on_delete = SET_DEFAULT, default=\"\" : 부모데이터 삭제시 자식데이터 default값으로 바뀜 : on_delete = SET_NULL : 부모데이터 삭제시 자식데이터 NULL 3교시 - 게시판 만들기 계속 4교시 - 폼 클래스 활용 장점 - 폼 클래스를 form.py에 생성 - templates/login.html을 생성하여 form이 들어가는 로그인화면 생성 : {{form}}으로 쓰면 클래스로 선언했던 것에 맞게 html태그가 생성됨 : ex. 변수명 => name, 라벨 => 라벨 - view.py에서 login 함수 수정 : form = LoginForm(), return에 {'form':form} - session : 논리적 연결 : 카톡 서버가 있고, 내 컴퓨터에 카톡채팅 2개 띄워놨을 때, 물리적 연결은 1개, 논리적 연결은 2개 5교시 - 세션을 이어갈 때, 일종의 토큰을 발급받아서 토큰 아이디를 기준으로 내용을 저장, 통신을 이어갈 때 토큰 아이디를 전달하여 세션 진행되도록 - summit을 눌렀을 때 어디로 가야할 지 알려주는게 action : templates/login.html에서 아래의 input type summit을 클릭하면 form이 위의 url따라서 가는것임 - redirect : 요청 받은 주소 말고 다른 주소로 바뀌는 것 6교시 - 게시판 만들기 실습 계속 - 최종프로젝트 팀 선정 관련 : 최종 프로젝트는 현업분들이 멘토링해줌 : 멘토링은 기획 같은 부분 위주 - 개인적으로 주제에 대해 좀 생각해보고 - 2월 8~9일 쯤에 주제 관련, 예상 주제에 대해 알려줄 것(멘토 의견) - 그 후에 주제 좀 더 생각해보면서 팀 구성 시작해보기 - 2/16까지 팀 확정 : 총 5팀 - 2월 20일 이후에 멘토와 얘기해볼 수 있을 듯 - 3월 초부터 프로젝트 기획부터 시작할 듯 - 멘토링은 수업시간 이외의 시간으로 과정 끝날 때까지 : 총 40시간 - 6월 21일에 과정 종료인데, 이 날은 발표날이고 6월 18일까지 프로젝트 진행한다고 생각하면 됨 ",
    "url": "/docs/daily-learning-log/20210201.html",
    "relUrl": "/docs/daily-learning-log/20210201.html"
  },"7": {
    "doc": "2021-02-01",
    "title": "2021-02-01",
    "content": " ",
    "url": "/docs/daily-learning-log/20210201.html",
    "relUrl": "/docs/daily-learning-log/20210201.html"
  },"8": {
    "doc": "2021-02-05",
    "title": "2021-02-05",
    "content": "1교시 - AWS 고가용성 아키텍처 - RDB는 완전 관리형 : 알아서 2중화 되어있는 서비스 - 고가용성 아키텍처는 중복이 기본, 가용영역은 두 개 써야함(같은 리전에서 다른 가용 영역) - 가용영역별로 서브넷을 구축, 서버 배치, DB 등을 중복시킨다 - 사실은 한 쪽의 시스템만 사용하고 있음 - load balancer가 중간에서 부하를 조정 (ALB) - 평상시에는 부하를 조정하다가 장애가 발생되면 헬스 체크로 인해 정상적인 쪽만 구동 됨 - 로드밸런스는 온프레미스에도 있는 기능 - 오토스케일링은 온프레미스에는 없음 - 24시간 돌리는 프로그램, 서버는 3~4개를 중복해서 씀 - 고가용성 아키텍처 사례2의 경우에는 아마존라우트S3가 리전 밖에 있음. - 따라서 부하에 따른 로드밸런스를 다른 리전에 보내줄 수도 있음 - 이번 프로젝트에서 오토스케일링은 안쓰는걸로 2교시 - 네트워크 구성 실습 - VPC 마법사로 만들면 라우팅 테이블도 자동으로 만들어짐 : 새로 만든 서브넷들에 연결 필요 - 라우팅 테이블에 가서 새로 생긴 vpc와 연결된 것이 2개 생성된 것 확인 - 상세를 봤을 때 , 라우팅에 NAT가 있는 것이 Private : private과 public 잘 구분해서 이름 써주기 3교시 - 네트워크 구성 실습 계속 4교시 - 네트워크 구성 간략 설명 - EC2는 원래 private subnet 안에 만드는게 일반적인데, 그렇게 하면 파일 올리는게 힘들어서 우리는 public에 생성할 것 5교시 - 6교시 - NAT랑 EIP는 만들어놓고 사용하지 않으면 요금이 나감? 7교시 - NAT(시간당 0.059USD, 처리 데이터비용별도), 탄력적IP는 비용이 나오므로 사용하지 않으면 바로 삭제하는 것이 좋다. ",
    "url": "/docs/daily-learning-log/20210205.html",
    "relUrl": "/docs/daily-learning-log/20210205.html"
  },"9": {
    "doc": "2021-02-05",
    "title": "2021-02-05",
    "content": " ",
    "url": "/docs/daily-learning-log/20210205.html",
    "relUrl": "/docs/daily-learning-log/20210205.html"
  },"10": {
    "doc": "2021-03-29",
    "title": "2021-03-29",
    "content": "쉘 스크립트 . - 쉘 스크립트 : 쉘 프로그래밍을 할 때, 원하는 명령어를 sh파일에 작성하여 저장 - 실행방법 //반드시 파일의 실행권한 필요 절대경로를 명령어로 써서 실행 (ex. /home/user/hello.sh) 다만, /usr/bin 폴더에 넣어놓는 경우에는 파일명만 써서 실행 가능 (ex. Hello.sh) - 실행 프로그램 지정해서 실행하는 방법 두 가지 : shebang, 프로그램에서 스크립트파일이름 - shebang(셔뱅) : 쉘 스크립트 가장 윗 줄에 '#!' 기호로 표기, 이 스크립트를 실행할 프로그램 지정 (ex. #! /bin/python, #! /bin/perl, #! /bin/bash) : #! 뒤는 띄어도 되고 안띄어도 됨 특정 실행 프로그램을 사용하여 실행하는 경우에는 무시됨 - shebang이 없는 경우, 현재 쉘을 사용하여 실행하게 됨 - 스크립트파일이름 : 실행권한이 없는 스크립트도 실행 가능 - # : 주석, 실행 시 무시 . - 공백 자유롭게 사용 가능 - 디버그 옵션 사용 : 프로그램에서 -옵션 스크립트파일이름 -x : 실행할 코드가 아닌 실행할 내용을 출력 -v : 디버그 상태에서 스크립트 내 실행할 코드를 그대로 표시 -f : 스크립트 내 메타문자의 효력을 정지 - 스크립트 내 디버그 옵션 set -[옵션] : 해당 디버그 옵션 활성화 set +[옵션] : 해당 디버그 옵션 비활성화 Exit Status . - 종료 상태를 의미 - 명령어 실행 결과를 숫자로 표기 - 일반적으로 0이 정상 종료를 의미하지만 예외도 있음 - $? : 명렁어 실행시 종료 상태를 저장, 새로운 명령어 실행시 새로운 값으로 덮어 씀 변수 - Variable, 변경 가능한 데이터가 저장되는 공간 - 쉘 프로그래밍에서의 변수는 특정 유형이 없음 - 쉘 내에서 자유롭게 선언 및 사용이 가능 (ex. 변수이름=변수값. 변수이름=$변수이름) - 모든 입력값을 문자열로 인식 - 특별한 용도의 변수 $$ : 현재 실행중인 쉘의 PID $? : 이전 작업의 Exit Status $! : 백그라운드로 실행된 프로세스의 PID - 스크립트 내에서 선언된 변수는 스크립트 내에서만 유효 (지역변수) - 전역변수 : env로 조회되는 변수는 쉘 내에서 호출한 쉘에서도 접근 가능 - export : 해당 변수를 전역변수로 변경, env에 소속됨 - export = : 변수 생성과 전역변수로 변경을 동시에 산술연산 - expr : 산술연산 수식을 인자로 받아서 처리, 소수점 처리 불가능 ex. Expr 10+3 - bc : 산술연산 수식을 입력으로 받아서 처리(대화형), 소수점 처리 가능(scale 활용) ex. bc (대화형 시작) ex. echo 10/3 | bc ex. echo \"scale=3;10/3\" | bc - let 조건부실행 (Exit Status 관련) - 앞 명령의 실행 결과에 따라 뒤 명령의 실행 여부 결정 - && : 앞 명령이 정상적으로 실행될 경우에만 뒤 명령을 실행 - || : 앞 명령이 정상적으로 실행되지 않을 경우에만 뒤 명령을 실행 . 위치 매개변수(Positional Parameter) (c나 python에서 함수에 변수 넣는거랑 같은 의미) - 명령어 내에서의 위치 (인자, Argument) - $0 : 현재 실행중인 쉘 스크립트의 이름 - $1~ : 현재 스크립트 실행 시 사용된 인자(1번, 2번, 3번, … ) 10이 넘어가는 경우에는 ${10} 이런 식으로 사용해야함 - $# : 전체 위치매개변수의 개수 - $*, $@ : 위치매개변수 전체 - 예를 들어 cp 명령어의 경우, 맨 뒤 변수만 목적지고 앞에 몇 개의 변수가 들어가던 복사하려는 인자가 됨 - 가장 마지막 위치매개변수 접근 : eval echo \\$$# echo $$# : $$가 해석되어 사용 불가 echo \\$$# : \\에 의해 $는 일반 문자로 인식되고, $#값이 붙게 됨 eval echo \\$$# : eval에 의해 뒤쪽 $ 기호가 다시 인식되어 마지막 매개변수 값을 가져올 수 있게 됨 - set을 이용하여 현재 사용중인 쉘에서 사용할 위치매개변수를 지정할 수 있음 (ex. set a b c e d) grep (Globally Regular Expression Print) . - 파일 내에서 사용자가 지정한 내용을 검색 - 검색 내용 부분에는 정규화표현식(Regular Expression)을 사용 - 검색된 내용을 화면에 출력 - 일부 옵션의 경우 검색된 내용이 출력되지 않음 - 검색 실행시 검색 대상 파일에는 영향을 미치지 않음 - ASCII, 즉 텍스트 데이터를 대상으로만 사용 가능 - strings 명령어를 이용하여 문자열로 치환해서 사용 가능 - 옵션 -c : 패턴을 찾고, 찾은 패턴이 들어있는 '줄 수'를 출력 (패턴 개수 아님!!!) -I : 대소문자 구분하지 않음 -l : 패턴을 찾고, 출력은 하지 않으며, 패턴이 들어있는 파일의 목록만 출력 -n : 패턴을 찾은 후 출력되는 라인 앞에 줄 수를 표시 -v : 찾고자 하는 패턴이 들어있지 않은 줄만 표기 -w : 단어 단위로 찾기 (온전하게, 앞 뒤로 공백, 특수문자 등이 위치) 정규화표현식 - 검색에 사용되는 패턴 - vi, grep, sed, awk 등 텍스트를 다루는 다양한 도구에서 사용 - /RE/ : vi, sed, awk - 'RE' : grep 정규화표현식 주요 패턴 - ^[pattern] : 패턴의 모양으로 시작하는 라인만 검색 (ex. '^root') - [pattern]$ : 패턴의 모양으로 줄이 끝나는 라인만 검색 (ex. 'root$') - \\ : 단어 단위의 시작과 끝을 나타내는 패턴 (ex. '\\<hello') ",
    "url": "/docs/daily-learning-log/20210329.html",
    "relUrl": "/docs/daily-learning-log/20210329.html"
  },"11": {
    "doc": "2021-03-29",
    "title": "2021-03-29",
    "content": " ",
    "url": "/docs/daily-learning-log/20210329.html",
    "relUrl": "/docs/daily-learning-log/20210329.html"
  },"12": {
    "doc": "manual",
    "title": "manual",
    "content": "Text can be **bold**, _italic_, or ~~strikethrough~~. [Link to another page](another-page). There should be whitespace between paragraphs. There should be whitespace between paragraphs. We recommend including a README, or a file with information about your project. # [](#header-1)Header 1 This is a normal paragraph following a header. GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere. ## [](#header-2)Header 2 > This is a blockquote following a header. > > When something is important enough, you do it even if the odds are not in your favor. ### [](#header-3)Header 3 ```js // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } ``` ```ruby # Ruby code with syntax highlighting GitHubPages::Dependencies.gems.each do |gem, version| s.add_dependency(gem, \"= #{version}\") end ``` #### [](#header-4)Header 4 `with code not transformed` * This is an unordered list following a header. * This is an unordered list following a header. * This is an unordered list following a header. ##### [](#header-5)Header 5 1. This is an ordered list following a header. 2. This is an ordered list following a header. 3. This is an ordered list following a header. ###### [](#header-6)Header 6 | head1 | head two | three |:-------------|:------------------|:------| ok | good swedish fish | nice | out of stock | good and plenty | nice | ok | good `oreos` | hmm | ok | good `zoute` drop | yumm | ### There's a horizontal rule below this. * * * ### Here is an unordered list: * Item foo * Item bar * Item baz * Item zip ### And an ordered list: 1. Item one 1. Item two 1. Item three 1. Item four ### And a nested list: - level 1 item - level 2 item - level 2 item - level 3 item - level 3 item - level 1 item - level 2 item - level 2 item - level 2 item - level 1 item - level 2 item - level 2 item - level 1 item ### Nesting an ol in ul in an ol - level 1 item (ul) 1. level 2 item (ol) 1. level 2 item (ol) - level 3 item (ul) - level 3 item (ul) - level 1 item (ul) 1. level 2 item (ol) 1. level 2 item (ol) - level 3 item (ul) - level 3 item (ul) 1. level 4 item (ol) 1. level 4 item (ol) - level 3 item (ul) - level 3 item (ul) - level 1 item (ul) ### And a task list - [ ] Hello, this is a TODO item - [ ] Hello, this is another TODO item - [x] Goodbye, this item is done ### Small image ![](https://assets-cdn.github.com/images/icons/emoji/octocat.png) ### Large image ![](https://guides.github.com/activities/hello-world/branching.png) ### Definition lists can be used with HTML syntax. Name Godzilla Born 1952 Birthplace Japan Color Green #### Multiple description terms and values Term : Brief description of Term Longer Term : Longer description of Term, possibly more than one line Term : First description of Term, possibly more than one line : Second description of Term, possibly more than one line Term1 Term2 : Single description of Term1 and Term2, possibly more than one line Term1 Term2 : First description of Term1 and Term2, possibly more than one line : Second description of Term1 and Term2, possibly more than one line ### More code ``` Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. ``` ``` The final element. ``` ",
    "url": "/docs/",
    "relUrl": "/docs/"
  },"13": {
    "doc": "Daily-learning-log",
    "title": "Daily learning log index page",
    "content": " ",
    "url": "/docs/daily-learning-log/",
    "relUrl": "/docs/daily-learning-log/"
  },"14": {
    "doc": "Daily-learning-log",
    "title": "Daily-learning-log",
    "content": " ",
    "url": "/docs/daily-learning-log/",
    "relUrl": "/docs/daily-learning-log/"
  }
}
